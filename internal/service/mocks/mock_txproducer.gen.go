// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Memonagi/wallet_project/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockwallets is a mock of wallets interface.
type Mockwallets struct {
	ctrl     *gomock.Controller
	recorder *MockwalletsMockRecorder
}

// MockwalletsMockRecorder is the mock recorder for Mockwallets.
type MockwalletsMockRecorder struct {
	mock *Mockwallets
}

// NewMockwallets creates a new mock instance.
func NewMockwallets(ctrl *gomock.Controller) *Mockwallets {
	mock := &Mockwallets{ctrl: ctrl}
	mock.recorder = &MockwalletsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockwallets) EXPECT() *MockwalletsMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *Mockwallets) CreateWallet(ctx context.Context, wallet models.Wallet, userID uuid.UUID) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet, userID)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockwalletsMockRecorder) CreateWallet(ctx, wallet, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*Mockwallets)(nil).CreateWallet), ctx, wallet, userID)
}

// DeleteWallet mocks base method.
func (m *Mockwallets) DeleteWallet(ctx context.Context, walletID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", ctx, walletID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockwalletsMockRecorder) DeleteWallet(ctx, walletID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*Mockwallets)(nil).DeleteWallet), ctx, walletID, userID)
}

// Deposit mocks base method.
func (m *Mockwallets) Deposit(ctx context.Context, userID uuid.UUID, transaction models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userID, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockwalletsMockRecorder) Deposit(ctx, userID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*Mockwallets)(nil).Deposit), ctx, userID, transaction)
}

// GetCurrency mocks base method.
func (m *Mockwallets) GetCurrency(ctx context.Context, walletID uuid.UUID) (models.WalletUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, walletID)
	ret0, _ := ret[0].(models.WalletUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockwalletsMockRecorder) GetCurrency(ctx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*Mockwallets)(nil).GetCurrency), ctx, walletID)
}

// GetWallet mocks base method.
func (m *Mockwallets) GetWallet(ctx context.Context, walletID, userID uuid.UUID, wallet models.Wallet) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID, userID, wallet)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockwalletsMockRecorder) GetWallet(ctx, walletID, userID, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*Mockwallets)(nil).GetWallet), ctx, walletID, userID, wallet)
}

// GetWallets mocks base method.
func (m *Mockwallets) GetWallets(ctx context.Context, request models.GetWalletsRequest, userID uuid.UUID) ([]models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", ctx, request, userID)
	ret0, _ := ret[0].([]models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockwalletsMockRecorder) GetWallets(ctx, request, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*Mockwallets)(nil).GetWallets), ctx, request, userID)
}

// Transfer mocks base method.
func (m *Mockwallets) Transfer(ctx context.Context, userID uuid.UUID, transaction models.Transaction, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, userID, transaction, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockwalletsMockRecorder) Transfer(ctx, userID, transaction, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*Mockwallets)(nil).Transfer), ctx, userID, transaction, rate)
}

// UpdateWallet mocks base method.
func (m *Mockwallets) UpdateWallet(ctx context.Context, walletID, userID uuid.UUID, wallet models.WalletUpdate, rate float64) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, walletID, userID, wallet, rate)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockwalletsMockRecorder) UpdateWallet(ctx, walletID, userID, wallet, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*Mockwallets)(nil).UpdateWallet), ctx, walletID, userID, wallet, rate)
}

// WithdrawMoney mocks base method.
func (m *Mockwallets) WithdrawMoney(ctx context.Context, userID uuid.UUID, transaction models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawMoney", ctx, userID, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawMoney indicates an expected call of WithdrawMoney.
func (mr *MockwalletsMockRecorder) WithdrawMoney(ctx, userID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawMoney", reflect.TypeOf((*Mockwallets)(nil).WithdrawMoney), ctx, userID, transaction)
}

// MockxrClient is a mock of xrClient interface.
type MockxrClient struct {
	ctrl     *gomock.Controller
	recorder *MockxrClientMockRecorder
}

// MockxrClientMockRecorder is the mock recorder for MockxrClient.
type MockxrClientMockRecorder struct {
	mock *MockxrClient
}

// NewMockxrClient creates a new mock instance.
func NewMockxrClient(ctrl *gomock.Controller) *MockxrClient {
	mock := &MockxrClient{ctrl: ctrl}
	mock.recorder = &MockxrClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockxrClient) EXPECT() *MockxrClientMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockxrClient) GetRate(ctx context.Context, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockxrClientMockRecorder) GetRate(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockxrClient)(nil).GetRate), ctx, from, to)
}

// MocktxProducer is a mock of txProducer interface.
type MocktxProducer struct {
	ctrl     *gomock.Controller
	recorder *MocktxProducerMockRecorder
}

// MocktxProducerMockRecorder is the mock recorder for MocktxProducer.
type MocktxProducerMockRecorder struct {
	mock *MocktxProducer
}

// NewMocktxProducer creates a new mock instance.
func NewMocktxProducer(ctrl *gomock.Controller) *MocktxProducer {
	mock := &MocktxProducer{ctrl: ctrl}
	mock.recorder = &MocktxProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxProducer) EXPECT() *MocktxProducerMockRecorder {
	return m.recorder
}

// ProduceTx mocks base method.
func (m *MocktxProducer) ProduceTx(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceTx", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceTx indicates an expected call of ProduceTx.
func (mr *MocktxProducerMockRecorder) ProduceTx(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceTx", reflect.TypeOf((*MocktxProducer)(nil).ProduceTx), key, value)
}
