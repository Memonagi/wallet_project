// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/transaction.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocktxProducer is a mock of txProducer interface.
type MocktxProducer struct {
	ctrl     *gomock.Controller
	recorder *MocktxProducerMockRecorder
}

// MocktxProducerMockRecorder is the mock recorder for MocktxProducer.
type MocktxProducerMockRecorder struct {
	mock *MocktxProducer
}

// NewMocktxProducer creates a new mock instance.
func NewMocktxProducer(ctrl *gomock.Controller) *MocktxProducer {
	mock := &MocktxProducer{ctrl: ctrl}
	mock.recorder = &MocktxProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxProducer) EXPECT() *MocktxProducerMockRecorder {
	return m.recorder
}

// ProduceTx mocks base method.
func (m *MocktxProducer) ProduceTx(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceTx", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceTx indicates an expected call of ProduceTx.
func (mr *MocktxProducerMockRecorder) ProduceTx(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceTx", reflect.TypeOf((*MocktxProducer)(nil).ProduceTx), key, value)
}
